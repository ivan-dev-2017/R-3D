//genera un numero rand
rnorm(1)
//lista las variables que coninciden con el patron
ls(pat = "m")
//muestra detalles de la variables
ls.str()
//tipo de variables
mode(x)
//tamaño de variable
length(x)
//se visualiza como string
cat(cit)
//directorio de trabajo
getwd()
//cambiar el directorio de trabajo
setwd("C:/Users/Lion/Desktop/R")
//leer archivos ASCII
misdatos <- read.table("data.dat")
cabecera <- c("Particula","MomentoLx","MomentoLy","MomentoLz","DistanciaX","DistanciaY","TiempoVuelo(ns)","EnergíaTotal(Gev)")

misdatos <- read.table("muchosdatos.dat", header = FALSE, sep = "", quote = "'",dec = ".", numerals = c("allow.loss", "warn.loss", "no.loss"),
            row.names = NULL, col.names = cabecera, as.is = FALSE, na.strings = "NA", colClasses = NA, nrows = -1, 
			skip = 0, check.names = TRUE, fill = FALSE,
            strip.white = FALSE, blank.lines.skip = TRUE, comment.char = "#", allowEscapes = FALSE, flush = FALSE,
            stringsAsFactors = default.stringsAsFactors(), fileEncoding = "", encoding = " UTF-8", text, skipNul = FALSE)

misdatos$V1, misdatos$V2,. . . , o escribiendo misdatos["V1"], misdatos["V2"], . . . , o, tambien escribiendo ´ misdatos[,1], misdatos[,2 ], . . .

x <- misdatos[1:1000,2]

//guardar datos
write.table
//generacion de datos
 x <- 1:30
seq(1, 5, 0.5)
//escribir valores
c(1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5)
//leer datos desde el teclado
z <- scan()
//elementos identicos
rep(1, 30)
//generador de secuencia donde temnina en el numero indicado
sequence(4:5)
//generador de niveles
gl(3, 5)
gl(3, 5, length=30)
gl(2, 6, label=c("Macho", "Hembra"))
//combinaciones de vectores 
expand.grid(a=c(60,80), p=c(100, 300), sexo=c("Macho", "Hembra"))
//secuencias aleatorias
Gausse (normal) rnorm(n, mean=0, sd=1)
exponencial rexp(n, rate=1)
gamma rgamma(n, shape, scale=1)
Poisson rpois(n, lambda)
Weibull rweibull(n, shape, scale=1)
Cauchy rcauchy(n, location=0, scale=1)
beta rbeta(n, shape1, shape2)
‘Student’ (t) rt(n, df)
Fisher–Snedecor (F) rf(n, df1, df2)
Pearson (χ
2
) rchisq(n, df)
binomial rbinom(n, size, prob)
geometrica ´ rgeom(n, prob)
hypergeometrica ´ rhyper(nn, m, n, k)
log´ıstica rlogis(n, location=0, scale=1)
lognormal rlnorm(n, meanlog=0, sdlog=1)
binomial negativa rnbinom(n, size, prob)
uniforme runif(n, min=0, max=1)
Estad´ıstico de Wilcoxon’s rwilcox(nn, m, n), rsignrank(nn, n)
//expresion
x <- 3; y <- 2.5; z <- 1
exp1 <- expression(x / (y + exp(z)))
eval(exp1)
///////////////////////////////////////////////////////GRAFICOS
//lista dispositivos
?device
//dispositivos abiertos
dev.list()
//dispositivo activo
 dev.cur()
 //cambiar dispositivo activo
 dev.set(3)
//cerrar dispositivo
dev.off(2)
//divide el dispositivo grafico
split.screen(c(1, 2))
//seleccionar un screen
screen(1)
//borra la ultima grafica dibujada
erase.screen()
//para dividir el dispositivo en cuatro partes iguales
layout(matrix(1:4, 2, 2))
//visualizar la particion creada
layout.show(4)
layout(matrix(1:6, 3, 2))
//dividir ventanas
m <- matrix(1:4, 2, 2)
>layout(m, widths=c(1, 3),
heights=c(3, 1))
>layout.show(4)
//ejemplo 2 variables
x <- rnorm(10)
y <- rnorm(10)
plot(x, y)
//ejemplo con mas parametros
plot(x, y, xlab="Diez numeros al azar", ylab="Otros diez numeros",
xlim=c(-2, 2), ylim=c(-2, 2), pch=22, col="red",
bg="yellow", bty="l", tcl=0.4,
main="Como personalizar un grafico en R", las=1, cex=1.5)

plot(x, y, xlab="Diez numeros al azar", ylab="Otros diez numeros",
xlim=c(-10, 10), ylim=c(-10, 10), pch=21, col="green",
bg="blue", bty="l", tcl=0.2,
main="Como personalizar un grafico en R", las=1, cex=1.5)
//cargar libreria graficos
library(lattice)
//ejemplo
n <- seq(5, 45, 5)
x <- rnorm(sum(n))
y <- factor(rep(n, n), labels=paste("n =", n))

densityplot(˜ x | y, panel = function(x, ...) {
panel.densityplot(x, col="DarkOliveGreen", ...)
panel.mathdensity(dmath=dnorm,args=list(mean=mean(x), sd=sd(x)),
col="blue")
})
//lista de funciones de un paquete
library(help=eda)
//3d parabola
x3d=seq(-3,3,length=100)
y3d=seq(-3,3,length=100)
parabola=function(x3d,y3d) x3d^2+y3d^2
z3d=outer(x3d, y3d, parabola)
persp(x3d,y3d,z3d,phi=20,theta=30)
ecuacionParab <- expression(z == x^2 + y^2)
persp(x3d,y3d,z3d,phi=20,theta=30,col="pink",expand = 1,main="Paraboloide", sub=ecuacionParab, col.main="green",scale=FALSE, border=NA,shade=0.5)
//Curvas de nivel
image(x,y,z)
contour(x,y,z,add=T)
//libreria rgl - clean borra frames despues de generar gif
library( rgl )
x <- misdatos[1:1000,2]
y <- misdatos[1:1000,3]
z <- misdatos[1:1000,4]
plot3d( x, y, z, col = 255, type = "s", radius = 0.5 )
play3d( spin3d( axis = c(0, 0, 1), rpm = 7), duration = 10 )
movie3d( spin3d( axis = c(0, 0, 1), rpm = 7),duration = 10, dir = getwd(),type = "gif", clean =  TRUE )
//installar
install.packages("RColorBrewer")
//listar paquetes
installed.packages() 
//listar funciones de un paquete
 ls("package:rgl")
 //otra forma
 data(iris)
 head(iris)
 x <- sep.l <- iris$Sepal.Length
 y <- pet.l <- iris$Petal.Length
 z <- sep.w <- iris$Sepal.Width
 
 rgl_init <- function(new.device = FALSE, bg = "white", width = 640) { 
  if( new.device | rgl.cur() == 0 ) {
    rgl.open()
    par3d(windowRect = 50 + c( 0, 0, width, width ) )
    rgl.bg(color = bg )
  }
  rgl.clear(type = c("shapes", "bboxdeco"))
  rgl.viewpoint(theta = 15, phi = 20, zoom = 0.7)
}
 rgl.open()# Open a new RGL device
 rgl.spheres(x, y, z, r = 0.2, color = "yellow")  # Scatter plot
 rgl.bg(color = "white") # Setup the background color
 
rgl.lines(c(min(x), max(x)), c(0, 0), c(0, 0), color = "black")
rgl.lines(c(0, 0), c(min(y),max(y)), c(0, 0), color = "red")
rgl.lines(c(0, 0), c(0, 0), c(min(z),max(z)), color = "green")
//escalar datos
x1 <- (x - min(x))/(max(x) - min(x))
y1 <- (y - min(y))/(max(y) - min(y))
z1 <- (z - min(z))/(max(z) - min(z))

# Make a scatter plot
rgl_init()
rgl.spheres(x1, y1, z1, r = 0.02, color = "yellow") 
# Add x, y, and z Axes
rgl.lines(c(0, 1), c(0, 0), c(0, 0), color = "black")
rgl.lines(c(0, 0), c(0,1), c(0, 0), color = "red")
rgl.lines(c(0, 0), c(0, 0), c(0,1), color = "green")

//colores por grupos
get_colors <- function(groups, group.col = palette()){
  groups <- as.factor(groups)
  ngrps <- length(levels(groups))
  if(ngrps > length(group.col)) 
    group.col <- rep(group.col, ngrps)
  color <- group.col[as.numeric(groups)]
  names(color) <- as.vector(groups)
  return(color)
}
//setear ejes
rgl_add_axes <- function(x, y, z, axis.col = "grey",
                xlab = "", ylab="", zlab="", show.plane = TRUE, 
                show.bbox = FALSE, bbox.col = c("#333377","black"))
  { 
  
  lim <- function(x){c(-max(abs(x)), max(abs(x))) * 1.1}
  # Add axes
  xlim <- lim(x); ylim <- lim(y); zlim <- lim(z)
  rgl.lines(xlim, c(0, 0), c(0, 0), color = axis.col)
  rgl.lines(c(0, 0), ylim, c(0, 0), color = axis.col)
  rgl.lines(c(0, 0), c(0, 0), zlim, color = axis.col)
  
   # Add a point at the end of each axes to specify the direction
   axes <- rbind(c(xlim[2], 0, 0), c(0, ylim[2], 0), 
                 c(0, 0, zlim[2]))
   rgl.points(axes, color = axis.col, size = 3)
  
  # Add axis labels
  rgl.texts(axes, text = c(xlab, ylab, zlab), color = axis.col,
             adj = c(0.5, -0.8), size = 2)
  
  # Add plane
  if(show.plane) 
    xlim <- xlim/1.1; zlim <- zlim /1.1
    rgl.quads( x = rep(xlim, each = 2), y = c(0, 0, 0, 0),
             z = c(zlim[1], zlim[2], zlim[2], zlim[1]))
  
  # Add bounding box decoration
  if(show.bbox){
    rgl.bbox(color=c(bbox.col[1],bbox.col[2]), alpha = 0.5, 
          emission=bbox.col[1], specular=bbox.col[1], shininess=5, 
          xlen = 3, ylen = 3, zlen = 3) 
  }
}

//ejemplo
cols <- get_colors(iris$Species, c("#999999", "#E69F00", "#56B4E9"))
rgl_init()
rgl.spheres(x, y, z, r = 0.2, 
          color = get_colors(iris$Species)) 
rgl_add_axes(x, y, z, show.bbox = TRUE)
aspect3d(1,1,1)

//
cols <- get_colors(misdatos$V1, c("#999999", "#E69F00", "#56B4E9"))
rgl_init()
rgl.spheres(x, y, z, r = 0.2, color = cols) 
rgl_add_axes(x, y, z, show.bbox = TRUE)
aspect3d(1,1,1)
//
library("RColorBrewer")
cols <- get_colors(iris$Species, brewer.pal(n=3, name="Dark2") )
rgl_init()
rgl.spheres(x, y, z, r = 0.2, color = cols) 
rgl_add_axes(x, y, z, show.bbox = TRUE)
aspect3d(1,1,1)
//
rgl_init()
shapelist3d(tetrahedron3d(), x, y, z, size =  0.15, 
            color = get_colors(iris$Species))
rgl_add_axes(x, y, z, show.bbox = TRUE)
aspect3d(1,1,1)
//
rgl_init()
rgl.spheres(x, y, z, r = 0.2, color = "#D95F02") 
rgl_add_axes(x, y, z, show.bbox = TRUE)
# Compute and draw the ellipse of concentration
ellips <- ellipse3d(cov(cbind(x,y,z)), 
            centre=c(mean(x), mean(y), mean(z)), level = 0.95)
shade3d(ellips, col = "#D95F02", alpha = 0.1, lit = FALSE)
aspect3d(1,1,1)
//
rgl_init()
rgl.spheres(x, y, z, r = 0.2, color = "#D95F02") 
rgl_add_axes(x, y, z, show.bbox = TRUE)
# Compute and draw the ellipse of concentration
ellips <- ellipse3d(cov(cbind(x,y,z)), 
            centre=c(mean(x), mean(y), mean(z)), level = 0.95)
wire3d(ellips, col = "#D95F02",  lit = FALSE)
aspect3d(1,1,1)
//
# Groups
groups <- iris$Species
levs <- levels(groups)
group.col <- c("red", "green", "blue")
# Plot observations
rgl_init()
rgl.spheres(x, y, z, r = 0.2,
            color = group.col[as.numeric(groups)]) 
rgl_add_axes(x, y, z, show.bbox = FALSE)
# Compute ellipse for each group
for (i in 1:length(levs)) {
    group <- levs[i]
    selected <- groups == group
    xx <- x[selected]; yy <- y[selected]; zz <- z[selected]
    ellips <- ellipse3d(cov(cbind(xx,yy,zz)), 
              centre=c(mean(xx), mean(yy), mean(zz)), level = 0.95) 
    shade3d(ellips, col = group.col[i], alpha = 0.1, lit = FALSE) 
    # show group labels
    texts3d(mean(xx),mean(yy), mean(zz), text = group,
            col= group.col[i], cex = 2)
  }
aspect3d(1,1,1)
//regresion lineal
rgl_init()
rgl.spheres(x, y, z, r = 0.2, color = "#D95F02") 
rgl_add_axes(x, y, z, show.bbox = FALSE)
aspect3d(1,1,1)
# Linear model
fit <- lm(z ~ x + y)
coefs <- coef(fit)
a <- coefs["x"]; b <- coefs["y"]; c <- -1
d <- coefs["(Intercept)"]
rgl.planes(a, b, c, d, alpha=0.2, color = "#D95F02")
//
rgl_init()
rgl.spheres(x, y, z, r = 0.2, color = "#D95F02") 
rgl_add_axes(x, y, z, show.bbox = FALSE)
aspect3d(1,1,1)
# Compute the linear regression (y = ax + bz + d)
fit <- lm(y ~ x + z)
# predict values on regular xz grid
grid.lines = 26
x.pred <- seq(min(x), max(x), length.out = grid.lines)
z.pred <- seq(min(z), max(z), length.out = grid.lines)
xz <- expand.grid( x = x.pred, z = z.pred)
y.pred <- matrix(predict(fit, newdata = xz), 
                 nrow = grid.lines, ncol = grid.lines)
# Add regression surface
rgl.surface(x.pred, z.pred, y.pred, color = "steelblue", 
                alpha = 0.5, lit = FALSE)  
# Add grid lines
rgl.surface(x.pred, z.pred, y.pred, color = "black",
    alpha = 0.5, lit = FALSE, front = "lines", back = "lines")
	
//gif
rgl_init()
rgl.spheres(x, y, z, r = 0.2, color = "#D95F02") 
rgl_add_axes(x, y, z, show.bbox = TRUE)
# Compute and draw the ellipse of concentration
ellips <- ellipse3d(cov(cbind(x,y,z)), 
            centre=c(mean(x), mean(y), mean(z)), level = 0.95)
wire3d(ellips, col = "#D95F02",  lit = FALSE)
aspect3d(1,1,1)
# Create a movie
movie3d(spin3d(axis = c(0, 0, 1)), duration = 3,
        dir = getwd())
//guardar img
rgl_init()
rgl.spheres(x, y, z, r = 0.2, color = "#D95F02") 
rgl_add_axes(x, y, z, show.bbox = T)
aspect3d(1,1,1)
rg.snapshot("plot.png")
rgl.postscript("plot.pdf",fmt="pdf")
//
rgl_init()
rgl.spheres(x, y, z, r = 0.2, 
          color = get_colors(iris$Species)) 
rgl_add_axes(x, y, z, show.bbox = FALSE)
# This writes a copy into temporary directory 'webGL',
# and then displays it
browseURL(
  paste("file://", writeWebGL(dir=file.path(tempdir(), "webGL"), 
  width=500), sep="")
  )
//
rgl_init()
rgl.spheres(x, y, z, r = 0.2, color = "#D95F02") 
rgl_add_axes(x, y, z, show.bbox = F)
aspect3d(1,1,1)
# Select a point
 f <- select3d()
 sel <- f(x,y,z) 
rgl.clear("shapes")
# Redraw the points
rgl.spheres(x[!sel],y[!sel], z[!sel], r = 0.2, color = "#D95F02")
rgl.spheres(x[sel],y[sel], z[sel], r = 0.2, color = "green")
//
rgl_init()
rgl.spheres(x, y, z, r = 0.2, color = "#D95F02") 
rgl_add_axes(x, y, z, show.bbox = F)
aspect3d(1,1,1)
rgl.material(color = "blue")
identify3d(x, y, z, labels = rownames(iris), n = 5)
//
rgl_init()
plot3d(x, y, z, col="blue", box = FALSE,
       type ="s", radius = 0.15, xlab ="Sepal.Length", 
       ylab = "Petal.Length", zlab = "Sepal.Width")
//
rgl_init()
plot3d(x, y, z, col="blue", box = FALSE,
       type ="s", radius = 0.15)
ellips <- ellipse3d(cov(cbind(x,y,z)), 
            centre=c(mean(x), mean(y), mean(z)), level = 0.95)
plot3d(ellips, col = "blue", alpha = 0.2, add = TRUE, box = FALSE)
//
rgl_init()
plot3d(x, y, z, col="blue", box = FALSE,
       type ="s", radius = 0.15)
ellips <- ellipse3d(cov(cbind(x,y,z)), 
            centre = c(mean(x), mean(y), mean(z)), level = 0.95)
plot3d(ellips, col = "blue", alpha = 0.5, add = TRUE, type = "wire")	   
		